
Laboratorio4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000274  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800110  00800110  00000318  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000798  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000691  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035d  00000000  00000000  000011f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cc  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000135  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:

/****************************************/
// NON-Interrupt subroutines
void setup()
{
	cli(); // Desactivar interrupciones globales
  a6:	f8 94       	cli

	DDRD  = 0xFF; // Puerto D como salida
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  ac:	1b b8       	out	0x0b, r1	; 11
	DDRC  = 0xFF;
  ae:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
  b0:	18 b8       	out	0x08, r1	; 8
	DDRB  = 0x00; // Puerto B como entrada
  b2:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF; // Pull-ups activados
  b4:	85 b9       	out	0x05, r24	; 5

	// Configuración del ADC
	ADMUX  = (1 << REFS0) | (1 << MUX2) | (1 << MUX1); // Ref: AVCC, Canal ADC6
  b6:	86 e4       	ldi	r24, 0x46	; 70
  b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN)  | (1 << ADIE)  | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	8f e8       	ldi	r24, 0x8F	; 143
  c2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Iniciar conversión ADC
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24

	// Configuración de interrupciones de pines
	PCICR  = (1 << PCIE0);
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK0 = (1 << PCINT0) | (1 << PCINT1);
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>

	// Configuración del Timer 0
	TCCR0A  = 0x00;
  d6:	14 bc       	out	0x24, r1	; 36
	TCCR0B  = (1 << CS01); // Prescaler reducido para mayor velocidad
  d8:	92 e0       	ldi	r25, 0x02	; 2
  da:	95 bd       	out	0x25, r25	; 37
	TCNT0   = 100;
  dc:	94 e6       	ldi	r25, 0x64	; 100
  de:	96 bd       	out	0x26, r25	; 38
	TIMSK0  = (1 << TOIE0);
  e0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>

	PrevState = 0;
  e4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <PrevState>
	sei(); // Habilitar interrupciones globales
  e8:	78 94       	sei
  ea:	08 95       	ret

000000ec <main>:

/****************************************/
// Main Function
int main(void)
{
	setup(); // Configurar MCU
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	while (1)
	{
		//Este if se encargara de hacer la comparativa entre informacion del ADC y el conteo con botones
		uint8_t valor_visual = ((adc_value >> 6) & 0x0F) * 16 + ((adc_value >> 2) & 0x0F);
  f0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <adc_value>
  f4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <adc_value+0x1>
  f8:	9c 01       	movw	r18, r24
  fa:	00 24       	eor	r0, r0
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	00 1c       	adc	r0, r0
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	00 1c       	adc	r0, r0
 108:	23 2f       	mov	r18, r19
 10a:	30 2d       	mov	r19, r0
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
 110:	96 95       	lsr	r25
 112:	87 95       	ror	r24
 114:	8f 70       	andi	r24, 0x0F	; 15
 116:	90 e1       	ldi	r25, 0x10	; 16
 118:	29 9f       	mul	r18, r25
 11a:	80 0d       	add	r24, r0
 11c:	11 24       	eor	r1, r1
		if (ConteoBo < valor_visual)
 11e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <ConteoBo>
 122:	98 17       	cp	r25, r24
 124:	20 f4       	brcc	.+8      	; 0x12e <main+0x42>
		{
			PORTC |= (1 << PC3);
 126:	88 b1       	in	r24, 0x08	; 8
 128:	88 60       	ori	r24, 0x08	; 8
 12a:	88 b9       	out	0x08, r24	; 8
 12c:	03 c0       	rjmp	.+6      	; 0x134 <main+0x48>
		}else{
			PORTC &= ~(1 << PC3);
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	87 7f       	andi	r24, 0xF7	; 247
 132:	88 b9       	out	0x08, r24	; 8
		}
		
		switch (Multi)
 134:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	71 f0       	breq	.+28     	; 0x158 <main+0x6c>
 13c:	18 f0       	brcs	.+6      	; 0x144 <main+0x58>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	29 f1       	breq	.+74     	; 0x18c <main+0xa0>
 142:	d6 cf       	rjmp	.-84     	; 0xf0 <main+0x4>
		{
		case 0:
			PORTC |= (1 << PC0); // Activar transistor en PC0
 144:	88 b1       	in	r24, 0x08	; 8
 146:	81 60       	ori	r24, 0x01	; 1
 148:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1 << PC2);
 14a:	88 b1       	in	r24, 0x08	; 8
 14c:	8b 7f       	andi	r24, 0xFB	; 251
 14e:	88 b9       	out	0x08, r24	; 8
			PORTD = ConteoBo; // Mostrar valor en el display
 150:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ConteoBo>
 154:	8b b9       	out	0x0b, r24	; 11
			break;
 156:	cc cf       	rjmp	.-104    	; 0xf0 <main+0x4>
		case 1:
			PORTC &= ~(1 << PC0);
 158:	88 b1       	in	r24, 0x08	; 8
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1 << PC1);
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	82 60       	ori	r24, 0x02	; 2
 162:	88 b9       	out	0x08, r24	; 8
			PORTD = hex_digits[(adc_value >> 6) & 0x0F]; // Mapear ADC a 0-15
 164:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <adc_value>
 168:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <adc_value+0x1>
 16c:	00 24       	eor	r0, r0
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	00 1c       	adc	r0, r0
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	00 1c       	adc	r0, r0
 17a:	ef 2f       	mov	r30, r31
 17c:	f0 2d       	mov	r31, r0
 17e:	ef 70       	andi	r30, 0x0F	; 15
 180:	ff 27       	eor	r31, r31
 182:	e0 50       	subi	r30, 0x00	; 0
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	80 81       	ld	r24, Z
 188:	8b b9       	out	0x0b, r24	; 11
			break;
 18a:	b2 cf       	rjmp	.-156    	; 0xf0 <main+0x4>
		case 2:
			PORTC |= (1 << PC2);
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1 << PC1);
 192:	88 b1       	in	r24, 0x08	; 8
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	88 b9       	out	0x08, r24	; 8
			PORTD = hex_digits[(adc_value >> 2) & 0x0F]; // Otra parte del ADC
 198:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <adc_value>
 19c:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <adc_value+0x1>
 1a0:	f6 95       	lsr	r31
 1a2:	e7 95       	ror	r30
 1a4:	f6 95       	lsr	r31
 1a6:	e7 95       	ror	r30
 1a8:	ef 70       	andi	r30, 0x0F	; 15
 1aa:	ff 27       	eor	r31, r31
 1ac:	e0 50       	subi	r30, 0x00	; 0
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	80 81       	ld	r24, Z
 1b2:	8b b9       	out	0x0b, r24	; 11
			break;
 1b4:	9d cf       	rjmp	.-198    	; 0xf0 <main+0x4>

000001b6 <__vector_16>:
}

/****************************************/
// Interrupt routines
ISR(TIMER0_OVF_vect)
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	8f 93       	push	r24
	TCNT0 = 100;
 1c2:	84 e6       	ldi	r24, 0x64	; 100
 1c4:	86 bd       	out	0x26, r24	; 38
	Multi++;
 1c6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	if(Multi==3){
 1d0:	83 30       	cpi	r24, 0x03	; 3
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <__vector_16+0x22>
		Multi=0;
 1d4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	}
}
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_3>:

ISR(PCINT0_vect)
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
	uint8_t currentState = PINB; // Leer estado actual de los pines
 1f4:	83 b1       	in	r24, 0x03	; 3

	// Detectar SOLO flanco de bajada (cuando pasa de 1 -> 0)
	if ((PrevState & (1 << PINB0)) && !(currentState & (1 << PINB0))) {
 1f6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <PrevState>
 1fa:	90 ff       	sbrs	r25, 0
 1fc:	07 c0       	rjmp	.+14     	; 0x20c <__vector_3+0x28>
 1fe:	80 fd       	sbrc	r24, 0
 200:	05 c0       	rjmp	.+10     	; 0x20c <__vector_3+0x28>
		ConteoBo++; // Incrementar contador
 202:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <ConteoBo>
 206:	2f 5f       	subi	r18, 0xFF	; 255
 208:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <ConteoBo>
	}
	if ((PrevState & (1 << PINB1)) && !(currentState & (1 << PINB1))) {
 20c:	91 ff       	sbrs	r25, 1
 20e:	07 c0       	rjmp	.+14     	; 0x21e <__vector_3+0x3a>
 210:	81 fd       	sbrc	r24, 1
 212:	05 c0       	rjmp	.+10     	; 0x21e <__vector_3+0x3a>
		ConteoBo--; // Decrementar contador
 214:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <ConteoBo>
 218:	91 50       	subi	r25, 0x01	; 1
 21a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <ConteoBo>
	}

	PrevState = currentState;
 21e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <PrevState>
}
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <__vector_21>:

ISR(ADC_vect)
{
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	ef 93       	push	r30
 242:	ff 93       	push	r31
	adc_value = ADC; // Leer valor completo de 10 bits
 244:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 248:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 24c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <adc_value+0x1>
 250:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <adc_value>
	ADCSRA |= (1 << ADSC); // Iniciar nueva conversión ADC
 254:	ea e7       	ldi	r30, 0x7A	; 122
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	80 64       	ori	r24, 0x40	; 64
 25c:	80 83       	st	Z, r24
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
