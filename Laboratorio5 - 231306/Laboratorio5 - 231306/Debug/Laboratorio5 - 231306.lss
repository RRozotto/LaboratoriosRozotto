
Laboratorio5 - 231306.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b8  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073b  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e2  00000000  00000000  0000135b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ee  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b1  00000000  00000000  00001bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001c67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <IniciarServo>:
#define F_CPU 16000000UL

void IniciarServo(void)//Funcion para configurar el PWM que manejara al servo
{
	// Se configura el pin PB1 para el servo
	DDRB |= (1 << PB1) | (1 << PB2);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	86 60       	ori	r24, 0x06	; 6
  84:	84 b9       	out	0x04, r24	; 4
	
	DDRD |= (1 << PD7);
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	8a b9       	out	0x0a, r24	; 10
	
	// Se configura el Timer1 en modo Fast PWM
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // Se configura OC1A y el modo PWM
  8c:	82 ea       	ldi	r24, 0xA2	; 162
  8e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Modo Fast con prescaler 8
  92:	8a e1       	ldi	r24, 0x1A	; 26
  94:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = 40000;  // Valor maximo para que el ciclo sea de 20ms (especifico para el servo)
  98:	80 e4       	ldi	r24, 0x40	; 64
  9a:	9c e9       	ldi	r25, 0x9C	; 156
  9c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  a0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = SerBottom;
  a4:	88 ee       	ldi	r24, 0xE8	; 232
  a6:	93 e0       	ldi	r25, 0x03	; 3
  a8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = SerBottom;
  b0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  b4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  b8:	08 95       	ret

000000ba <AsignarValor>:
}

void AsignarValor(uint16_t Grados)
{
	if (Grados < SerBottom){
  ba:	88 3e       	cpi	r24, 0xE8	; 232
  bc:	23 e0       	ldi	r18, 0x03	; 3
  be:	92 07       	cpc	r25, r18
  c0:	10 f4       	brcc	.+4      	; 0xc6 <AsignarValor+0xc>
		Grados = SerBottom;
  c2:	88 ee       	ldi	r24, 0xE8	; 232
  c4:	93 e0       	ldi	r25, 0x03	; 3
	}
	
	if (Grados > SerTop){
  c6:	89 38       	cpi	r24, 0x89	; 137
  c8:	23 e1       	ldi	r18, 0x13	; 19
  ca:	92 07       	cpc	r25, r18
  cc:	10 f0       	brcs	.+4      	; 0xd2 <AsignarValor+0x18>
		Grados = SerTop;
  ce:	88 e8       	ldi	r24, 0x88	; 136
  d0:	93 e1       	ldi	r25, 0x13	; 19
	}
	
	OCR1A = Grados;
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  da:	08 95       	ret

000000dc <AsignarValor2>:
}

void AsignarValor2(uint16_t Grados2)
{
	if (Grados2 < SerBottom) Grados2 = SerBottom;
  dc:	88 3e       	cpi	r24, 0xE8	; 232
  de:	23 e0       	ldi	r18, 0x03	; 3
  e0:	92 07       	cpc	r25, r18
  e2:	10 f4       	brcc	.+4      	; 0xe8 <AsignarValor2+0xc>
  e4:	88 ee       	ldi	r24, 0xE8	; 232
  e6:	93 e0       	ldi	r25, 0x03	; 3
	if (Grados2 > SerTop) Grados2 = SerTop;
  e8:	89 38       	cpi	r24, 0x89	; 137
  ea:	23 e1       	ldi	r18, 0x13	; 19
  ec:	92 07       	cpc	r25, r18
  ee:	10 f0       	brcs	.+4      	; 0xf4 <AsignarValor2+0x18>
  f0:	88 e8       	ldi	r24, 0x88	; 136
  f2:	93 e1       	ldi	r25, 0x13	; 19
	OCR1B = Grados2;
  f4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  f8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  fc:	08 95       	ret

000000fe <LeerADC>:
#include <avr/interrupt.h>
#include "LibreriaServo.h"

uint16_t LeerADC(uint8_t Pin)
{
	ADMUX = (ADMUX & 0xF0) | (Pin & 0x0F);
  fe:	ec e7       	ldi	r30, 0x7C	; 124
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	90 81       	ld	r25, Z
 104:	90 7f       	andi	r25, 0xF0	; 240
 106:	8f 70       	andi	r24, 0x0F	; 15
 108:	89 2b       	or	r24, r25
 10a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
 116:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 11a:	86 fd       	sbrc	r24, 6
 11c:	fc cf       	rjmp	.-8      	; 0x116 <LeerADC+0x18>
	return ADC;
 11e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 122:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 126:	08 95       	ret

00000128 <Setup>:

void Setup(void)
{
	cli();
 128:	f8 94       	cli
	DDRD    = 0xFF;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	8a b9       	out	0x0a, r24	; 10
	PORTD   = 0x00;
 12e:	1b b8       	out	0x0b, r1	; 11
	
	DDRB |= (1 << DDB3);
 130:	84 b1       	in	r24, 0x04	; 4
 132:	88 60       	ori	r24, 0x08	; 8
 134:	84 b9       	out	0x04, r24	; 4
	
	ADMUX = (1 << REFS0) | (1 << MUX1); // 5v como ref y A2 como entrada del ADC
 136:	82 e4       	ldi	r24, 0x42	; 66
 138:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Prescaler 128
 13c:	87 e8       	ldi	r24, 0x87	; 135
 13e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	TCCR2A = (1 << COM2A1) | (1 << WGM21) | (1 << WGM20); // Modo Fast PWM
 142:	83 e8       	ldi	r24, 0x83	; 131
 144:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS21);  // Prescaler de 8
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 0;  // Inicializar ciclo de trabajo a 0 (apagado)
 14e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
	sei();
 152:	78 94       	sei
 154:	08 95       	ret

00000156 <main>:
}

int main(void)
{
	uint16_t adcValue, adcValue2, adcValue3, Grados, Grados2, brilloLED;
	Setup();
 156:	0e 94 94 00 	call	0x128	; 0x128 <Setup>
	IniciarServo();
 15a:	0e 94 40 00 	call	0x80	; 0x80 <IniciarServo>
	
	//void loop
	while (1)
	{
		adcValue = LeerADC(2); // A2
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 7f 00 	call	0xfe	; 0xfe <LeerADC>
 164:	ec 01       	movw	r28, r24
		adcValue2 = LeerADC(1); // A1
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 7f 00 	call	0xfe	; 0xfe <LeerADC>
 16c:	8c 01       	movw	r16, r24
		adcValue3 = LeerADC(0); // A0
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 7f 00 	call	0xfe	; 0xfe <LeerADC>
 174:	5c 01       	movw	r10, r24
		
		Grados = ((uint32_t)adcValue * 4000) / 1023 + 1000;
 176:	9e 01       	movw	r18, r28
 178:	a0 ea       	ldi	r26, 0xA0	; 160
 17a:	bf e0       	ldi	r27, 0x0F	; 15
 17c:	0e 94 10 01 	call	0x220	; 0x220 <__umulhisi3>
 180:	0f 2e       	mov	r0, r31
 182:	cc 24       	eor	r12, r12
 184:	ca 94       	dec	r12
 186:	f3 e0       	ldi	r31, 0x03	; 3
 188:	df 2e       	mov	r13, r31
 18a:	e1 2c       	mov	r14, r1
 18c:	f1 2c       	mov	r15, r1
 18e:	f0 2d       	mov	r31, r0
 190:	a7 01       	movw	r20, r14
 192:	96 01       	movw	r18, r12
 194:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__udivmodsi4>
 198:	e9 01       	movw	r28, r18
 19a:	c8 51       	subi	r28, 0x18	; 24
 19c:	dc 4f       	sbci	r29, 0xFC	; 252
		Grados2 = ((uint32_t)adcValue2 * 4000) / 1023 + 1000;
 19e:	98 01       	movw	r18, r16
 1a0:	a0 ea       	ldi	r26, 0xA0	; 160
 1a2:	bf e0       	ldi	r27, 0x0F	; 15
 1a4:	0e 94 10 01 	call	0x220	; 0x220 <__umulhisi3>
 1a8:	a7 01       	movw	r20, r14
 1aa:	96 01       	movw	r18, r12
 1ac:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__udivmodsi4>
 1b0:	89 01       	movw	r16, r18
 1b2:	08 51       	subi	r16, 0x18	; 24
 1b4:	1c 4f       	sbci	r17, 0xFC	; 252
		brilloLED = ((uint32_t)adcValue3 * 255UL) / 1023;
 1b6:	95 01       	movw	r18, r10
 1b8:	af ef       	ldi	r26, 0xFF	; 255
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	0e 94 10 01 	call	0x220	; 0x220 <__umulhisi3>
 1c0:	a7 01       	movw	r20, r14
 1c2:	96 01       	movw	r18, r12
 1c4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__udivmodsi4>
 1c8:	f2 2e       	mov	r15, r18
		//brilloLED = (brilloLED * 64) / 8;  // Ajuste proporcional al cambio de prescaler
		
		
		AsignarValor2(Grados2);
 1ca:	c8 01       	movw	r24, r16
 1cc:	0e 94 6e 00 	call	0xdc	; 0xdc <AsignarValor2>
		//_delay_ms(20);
		AsignarValor(Grados);
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 5d 00 	call	0xba	; 0xba <AsignarValor>
		//_delay_ms(20);
		OCR2A = (uint8_t)brilloLED;
 1d6:	f0 92 b3 00 	sts	0x00B3, r15	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 1da:	c1 cf       	rjmp	.-126    	; 0x15e <main+0x8>

000001dc <__udivmodsi4>:
 1dc:	a1 e2       	ldi	r26, 0x21	; 33
 1de:	1a 2e       	mov	r1, r26
 1e0:	aa 1b       	sub	r26, r26
 1e2:	bb 1b       	sub	r27, r27
 1e4:	fd 01       	movw	r30, r26
 1e6:	0d c0       	rjmp	.+26     	; 0x202 <__udivmodsi4_ep>

000001e8 <__udivmodsi4_loop>:
 1e8:	aa 1f       	adc	r26, r26
 1ea:	bb 1f       	adc	r27, r27
 1ec:	ee 1f       	adc	r30, r30
 1ee:	ff 1f       	adc	r31, r31
 1f0:	a2 17       	cp	r26, r18
 1f2:	b3 07       	cpc	r27, r19
 1f4:	e4 07       	cpc	r30, r20
 1f6:	f5 07       	cpc	r31, r21
 1f8:	20 f0       	brcs	.+8      	; 0x202 <__udivmodsi4_ep>
 1fa:	a2 1b       	sub	r26, r18
 1fc:	b3 0b       	sbc	r27, r19
 1fe:	e4 0b       	sbc	r30, r20
 200:	f5 0b       	sbc	r31, r21

00000202 <__udivmodsi4_ep>:
 202:	66 1f       	adc	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	88 1f       	adc	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	1a 94       	dec	r1
 20c:	69 f7       	brne	.-38     	; 0x1e8 <__udivmodsi4_loop>
 20e:	60 95       	com	r22
 210:	70 95       	com	r23
 212:	80 95       	com	r24
 214:	90 95       	com	r25
 216:	9b 01       	movw	r18, r22
 218:	ac 01       	movw	r20, r24
 21a:	bd 01       	movw	r22, r26
 21c:	cf 01       	movw	r24, r30
 21e:	08 95       	ret

00000220 <__umulhisi3>:
 220:	a2 9f       	mul	r26, r18
 222:	b0 01       	movw	r22, r0
 224:	b3 9f       	mul	r27, r19
 226:	c0 01       	movw	r24, r0
 228:	a3 9f       	mul	r26, r19
 22a:	70 0d       	add	r23, r0
 22c:	81 1d       	adc	r24, r1
 22e:	11 24       	eor	r1, r1
 230:	91 1d       	adc	r25, r1
 232:	b2 9f       	mul	r27, r18
 234:	70 0d       	add	r23, r0
 236:	81 1d       	adc	r24, r1
 238:	11 24       	eor	r1, r1
 23a:	91 1d       	adc	r25, r1
 23c:	08 95       	ret

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
